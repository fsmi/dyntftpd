#!/usr/bin/python
#
# dyntftpd
#
# Copyright (C) 2008 Fabian Knittel <fabian.knittel@avona.com>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2, or (at your option)
# any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA.

PACKAGE_MODULE_PATH = '.'
CONFIG_FILE = '/etc/dyntftpd/dyntftpd.conf'

import sys
sys.path.append(PACKAGE_MODULE_PATH)

from optparse import OptionParser
from ConfigParser import SafeConfigParser
from cStringIO import StringIO
import tftpy
import logging
import logging.config
import os
import socket
import re
import daemon
import signal

# Private python modules.
import dt_file_ver_cmp
import dt_filesys

logger = logging.getLogger('dyntftpd')

def open_newest_file(search_dir, prefix, path, match):
	prefix = prefix + '-'
	suffix = '-' + match.group(1)
	newest_fn = dt_file_ver_cmp.find_highest_file_ver(prefix, suffix,
			search_dir)
	if newest_fn is not None:
		logger.info("determined newest file: %s" % newest_fn)
		return open(newest_fn, 'rb'), os.stat(newest_fn).st_size
	else:
		return None, 0

def hex_to_ip(hex):
	assert(len(hex) == 8)
	ip_nums = []
	i = 0
	while i < len(hex):
		num = hex[i:i + 2]
		ip_nums.append(str(int(num, 16)))
		i += 2
	return '.'.join(ip_nums)

def gen_pxelinux_cfg(path, match, global_cfg_dir, profile_dirs, domain_regex):
	hex_ip = match.group(1)
	ip = hex_to_ip(hex_ip)
	try:
		host = socket.gethostbyaddr(ip)[0]
	except socket.herror:
		return None, 0
	domain_match = domain_regex.search(host)
	if domain_match is None:
		return None, 0

	logger.debug('Matched "%s", which is "%s" (%s)' % (path, host, ip))
	profile_file = os.path.join(profile_dirs, '%s_cfg.py' % domain_match.group(1))
	if not os.path.exists(profile_file):
		logger.debug('No configuration found for host %s (%s)' % (host, profile_file))
		return None, 0

	config_space = {}
	execfile(profile_file, config_space)

	kwargs = {
			'ip': ip,
			'global_cfg_dir': global_cfg_dir
			}
	cfg_data = config_space['create_head_str'](**kwargs)
	for label in config_space['create_labels'](**kwargs):
		cfg_data += str(label)

	return StringIO(cfg_data), len(cfg_data)

class SignalReceived(SystemExit):
	def __init__(self, signum):
		SystemExit.__init__(self, "signal %d" % signum)

def sig_handler(signum, frame):
	raise SignalReceived, int(signum)

def add_overlay(simul_fs, cf, section):
	virtual_dir = cf.get(section, 'virtual_dir')
	if virtual_dir[0] != '/':
		raise RuntimeError, 'Overlay %s with relative virtual_dir "%s"' % \
				(key, virtual_dir)
	# Assure virtual dir ends with slash
	if virtual_dir[-1] != '/':
		virtual_dir += '/'

	if cf.get(section, 'type') == 'newest_kernel':
		image_dir = cf.get(section, 'image_dir')
		logger.debug('Adding kernel image overlay at %s to %s' % (
				virtual_dir, image_dir))
		simul_fs.add_handler('^%svmlinuz-([^/]+)$' % virtual_dir,
				lambda p, m: open_newest_file(image_dir, 'vmlinuz', p, m))
		simul_fs.add_handler('^%sinitrd.img-([^/]+)$' % virtual_dir,
				lambda p, m: open_newest_file(image_dir, 'initrd.img', p, m))
	else:
		raise RuntimeError, 'Overlay %s with unknown type "%s"' % \
				(key, cf.get(section, 'type'))

def main():
	# Parse command-line options.
	parser = OptionParser()

	parser.add_option("-c", "--config",
					action = "store", dest = "config_file",
					help = "Configuration file",
					default = CONFIG_FILE)

	(options, args) = parser.parse_args()
	if len(args) != 0:
		parser.error("incorrect number of arguments")

	# Load configuration file.
	cf = SafeConfigParser()
	cf.read(options.config_file)

	if cf.has_option('pxe_linux', 'module_path'):
		for path in cf.get('pxe_linux', 'module_path').split(':'):
			sys.path.append(path)


	# Parse configuration file again, this time specifically for logging.
	logging.config.fileConfig(options.config_file)
	logger.info('Loading dyntftpd')

	simul_fs = dt_filesys.SimulatedFileSystem()

	domain_match = re.compile(cf.get('pxe_linux', 'domain_regex'))
	cfg_dir = cf.get('pxe_linux', 'global_cfg_dir')
	profile_dirs = cf.get('pxe_linux', 'profile_cfg_dirs')
	simul_fs.add_handler('^/pxelinux.cfg/([0-9a-fA-F]{8})$',
			lambda p, m: gen_pxelinux_cfg(p, m, cfg_dir, profile_dirs,
					domain_match))

	# Add overlays
	if cf.get('overlays', 'keys'):
		for key in cf.get('overlays', 'keys').split(','):
			add_overlay(simul_fs, cf, 'overlay_%s' % key.strip())


	native_fs = tftpy.TftpNativeFileSys(cf.get('tftp', 'root'))

	fss = dt_filesys.FileSystemStack()
	fss.add_file_sys(native_fs)
	fss.add_file_sys(simul_fs)

	server = tftpy.TftpCommonServer(fss)

	# (Optionally) move to background
	if cf.getboolean('tftp', 'background'):
		logger.debug('moving dyntftpd to background')
		daemon.daemonise(pid_file = cf.get('tftp', 'pid_file'))

	# Set signal handlers.
	signal.signal(signal.SIGINT, sig_handler)
	signal.signal(signal.SIGTERM, sig_handler)

	try:
		server.listen(cf.get('tftp', 'host'), cf.getint('tftp', 'port'))
	except SystemExit, ex:
		logger.info('Shutdown requested: %s' % ex)
	except:
		logger.exception('Exception caught, aborting')
	logger.info('Exiting dyntftpd')

if __name__ == '__main__':
	main()

# vim:set ft=python ts=4:
